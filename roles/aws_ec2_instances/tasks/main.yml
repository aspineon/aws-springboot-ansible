---

- name:  Get AMI for Ubuntu in our region
  ec2_ami_facts:
    profile: "{{ aws_profile }}"
    owners:  099720109477
    filters: 
      name: "ubuntu/images/*/ubuntu-*-18.04-*"
      root-device-type: "ebs"
      state: "available"
  register: ami_find

- name: Set AMI ID in a fact
  set_fact:
    aws_instance_ami: "{{ ami_find.images | last | json_query('image_id') }}"  

- name: Get azs that are available in our region
  aws_az_facts:
     profile: "{{ aws_profile }}"
     filters:
       state: "available"
  register: aws_az

#- debug: var=aws_az  

- name: Set aws_region fact
  set_fact:
    aws_region: "{{ aws_az.availability_zones | first | json_query('region_name') }}"

#we can set more AZs by looping through availability_zones, but we are just doing two, so a little bit of a duplicate :)
- name: Set AZ1 fact
  set_fact:
    az1: "{{ aws_az.availability_zones | first | json_query('zone_name') }}"

- name: Set AZ2 fact
  set_fact:
    az2: "{{ aws_az.availability_zones | last | json_query('zone_name') }}"
  
- debug:
    msg: "AWS profile in Play is {{ aws_profile }} , ami_id is {{ aws_instance_ami }}
    , az-1: {{ az1 }} az-2: {{ az2 }} and region: {{ aws_region }}"

- name: Create Spring App Security Group
  ec2_group:
    name:             "Spring App-{{ aws_profile }}"
    description:      "Port 80, 443, 22"
    profile:          "{{ aws_profile }}"
    rules:
      - proto:        tcp
        from_port:    80
        to_port:      80
        cidr_ip:      0.0.0.0/0
      - proto:        tcp
        from_port:    443
        to_port:      443
        cidr_ip:      0.0.0.0/0
      - proto:        tcp
        from_port:    22
        to_port:      22
        cidr_ip:      0.0.0.0/0
    state:            "present"
  register: springapp_group

#- debug: var=springapp_group

- name: Set Spring App Security Group ID in variable
  set_fact:
    springapp_group_id: "{{ springapp_group.group_id }}"

- name: Create Spring App Server [AZ1]
  ec2:
    profile:          "{{ aws_profile }}"
    key_name:         "{{ aws_key_name }}"
    region:           "{{ aws_region }}"
    instance_type:    "{{ aws_instance_type }}"
    instance_tags:
      az1: "yes"
    image:            "{{ aws_instance_ami }}"
    zone:             "{{ az1 }}"
    wait:             yes
    group_id:         ["{{ springapp_group_id }}"]
    count:      "{{ instances_count }}"
    monitoring: yes
  register: springapp_az1_ec2s

- name: Set AZ1 instances fact
  set_fact:
    az1_instances: "{{ springapp_az1_ec2s.instances }}"

- debug: var=springapp_az1_ec2s

- name: Create Spring App Server [AZ2]
  ec2:
    profile:          "{{ aws_profile }}"
    key_name:         "{{ aws_key_name }}"
    region:           "{{ aws_region }}"
    instance_type:    "{{ aws_instance_type }}"
    instance_tags:
      az2: "yes"
    image:            "{{ aws_instance_ami }}"
    zone:             "{{ az2 }}"
    wait:             yes
    group_id:         ["{{ springapp_group_id }}"]
    count:      "{{ instances_count }}"
    monitoring: yes
  register: springapp_az2_ec2s

- name: Set AZ2 instances fact
  set_fact:
    az2_instances: "{{ springapp_az2_ec2s.instances }}"

- name: Tag instances at AZ1
  ec2_tag:
    profile:  "{{ aws_profile }}"
    resource: "{{ item.0.id }}"
    tags:
      Name: "{{ aws_profile }}-{{ item.1 }}-{{ az1 }}"
  with_together:
    - "{{ az1_instances }}"
    - "{{ range(1, instances_count + 1) | list }}"

#- debug: var=az2_instances

- name: Tag instances at AZ2
  ec2_tag:
    profile:  "{{ aws_profile }}"
    resource: "{{ item.0.id }}"
    tags:
      Name: "{{ aws_profile }}-{{ item.1 }}-{{ az2 }}"
  with_together:
    - "{{ az2_instances }}"
    - "{{ range(1, instances_count + 1) | list }}"

- debug: var=springapp_az2_ec2s

# Load Balancer

- name: Create Elastic Load Balancer Security Group
  ec2_group:
    name:  "SG for Spring App ELB-{{ aws_profile }}"
    description:      "Port 80, 443"
    profile:          "{{ aws_profile }}"
    region:           "{{ aws_region }}"
    rules:
      - proto: tcp
        from_port: 80
        to_port: 80
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 443
        to_port: 443
        cidr_ip: 0.0.0.0/0
    state:  "present"
  register: my_lb_group

#- debug: var=my_lb_group

- name: Set Elastic Load Balancer Security Group ID in variable
  set_fact:
    lb_group_id: "{{ my_lb_group.group_id }}"

- name: Create Load Balancer for Spring App
  ec2_elb_lb:
    name:             "spring-app-{{aws_profile}}"
    state:            "present"
    profile:          "{{ aws_profile }}"
    region:           "{{ aws_region }}"
    security_group_ids:       "{{ lb_group_id }}"
    cross_az_load_balancing:  "yes"
    instance_ids:
      - "{{ item }}"
    zones:
      - "{{ az1 }}"
      - "{{ az2 }}"
    listeners:
      - protocol:             tcp
        load_balancer_port:   80
        instance_port:        80
        proxy_protocol:       false
      - protocol:             tcp
        load_balancer_port:   443
        instance_port:        443
        proxy_protocol:       false
    health_check:
      ping_protocol:          tcp
      ping_port:              80
      ping_path:              "/"
      response_timeout:       5
      interval:               30
      unhealthy_threshold:    2
      healthy_threshold:      2
  register: ec2_elb  
  with_flattened:
    - "{{ springapp_az1_ec2s.instance_ids }}"
    - "{{ springapp_az2_ec2s.instance_ids }}"  

#- debug: var=ec2_elb

#collecting meta data and adding hosts to our profile host

- name: Add to hosts variabls
  add_host:
    hostname: "{{ item.public_ip }}"
    groups: 
      - "{{ aws_profile }}"
      - current_hosts_in_play
  with_flattened:
    - "{{ az1_instances +  az2_instances}}"

- name: Add profile inventory to hosts
  lineinfile: 
    dest: "{{ inventory_dir }}/hosts"
    line: "[{{ aws_profile }}]"

- name: Add the newly created EC2 instances to the local host group
  lineinfile:
    dest: "{{ inventory_dir }}/hosts"
    insertafter: '\["{{ aws_profile }}"\]'
    line: "{{ item.public_ip }}"
  with_flattened:
    - "{{ az1_instances +  az2_instances}}"

- name: Create our group_vars file for our hosts
  file: dest="{{ inventory_dir }}/group_vars/{{ aws_profile }}" state=touch

#- debug: var=az1_instances

- name: Add AZ1 to our profile group
  lineinfile:
    dest: "{{ inventory_dir }}/group_vars/{{ aws_profile }}"
    regexp: 'az1' 
    line: "az1: {{ az1 }}"
  changed_when: False

- name: Add AZ2 to our profile group
  lineinfile:
    dest: "{{ inventory_dir }}/group_vars/{{ aws_profile }}"
    regexp: 'az2' 
    line: "az2: {{ az2 }}"
  when: (az2_instances | length > 0)
  changed_when: False

- name: Add instance_ids to current run profile az1 + az2
  lineinfile:
    dest: "{{ inventory_dir }}/group_vars/{{ aws_profile }}"
    regexp: 'instance_ids' 
    line: 'instance_ids: "{{ springapp_az1_ec2s.instance_ids +  springapp_az2_ec2s.instance_ids }}"' 
  when: (az2_instances | length > 0)
  changed_when: False

- name: Add meta data for the newly created EC2 Security Group to the var group
  lineinfile:
    dest: "{{ inventory_dir }}/group_vars/{{ aws_profile }}" 
    regexp: 'springappsg' 
    line: "springappsg: '{{ item }}'"
  with_items:
    - "{{ springapp_group_id }}"
  changed_when: False
  
- name: Add meta data for the newly created ELB Security Group to the var group
  lineinfile:
    dest: "{{ inventory_dir }}/group_vars/{{ aws_profile }}" 
    regexp: "springappelbsg"
    line: "springappelbsg: '{{ item }}'"
  with_items:
    - "{{ lb_group_id }}"
  changed_when: False

- name: Add meta data for the newly created ELB to the var group
  lineinfile:
    dest: "{{ inventory_dir }}/group_vars/{{ aws_profile }}" 
    regexp: "springappelb_name"
    line: "springappelb_name: '{{ ec2_elb.results[0].elb.hosted_zone_name }}' "
  changed_when: False

- name: Add meta data for the newly created ELB to the var group
  lineinfile:
    dest: "{{ inventory_dir }}/group_vars/{{ aws_profile }}" 
    regexp: "springappelb_zone"
    line: "springappelb_zone: '{{ ec2_elb.results[0].elb.hosted_zone_id }}' "
  changed_when: False

- name: Add the region to our vars
  lineinfile:
    dest: "{{ inventory_dir }}/group_vars/{{ aws_profile }}" 
    regexp: "aws_region"
    line: "aws_region: {{ aws_region }}"
  changed_when: False

- name: Add last deploy epoch time to profile
  lineinfile:
    dest: "{{ inventory_dir }}/group_vars/{{ aws_profile }}" 
    regexp: "last_deploy"
    line: "last_deploy: {{ ansible_date_time.epoch }}"
  changed_when: False

- name: Pause, let's wait a bit for the machines to start
  pause: 
    seconds: 20

- debug:
    msg: "Now let's run the role deploy_spring_app"